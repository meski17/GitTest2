{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6638\pardirnatural\partightenfactor0

\f0\fs24 \cf0 man programmiert mit Expressions\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Mehrere Befehle werden Sequenzen gennant\
Rechner nicht sagen wie er es machen soll -> imperativ\
Sondern was gemacht werden muss -> Ausdruck ->funktionelle\

\fs28 \
\
Ausdr\'fccke liefern einen Wert = auch ein Ausdruck. Wir k\'f6nnen auch in die Programmierung eingreifen. Alles ist ein Ausdruck\
\
Werte verkn\'fcpfen\
+ ist eine Funktion \
\
String sind Listen von Chars\
Prellte sind Funktionen um auf die Listen zu arbeiten\
\
Listen schreiben [] Alle Elemente m\'fcssen von gleichem Element sein\
\
Tuppel = verschiedene Elemente einbauen geht. Aber Kuppel haben eine Einschr\'e4nkung in ihrer L\'e4nge\
\
\
Selber Funktionen bauen\'85 let weil man im interaktiven modus ist\
Let gilt nur im lokalen Bereich\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs42 \cf2 \cb3 \CocoaLigature0 Prelude> let fact n = product [1..n]\

\fs28 Eine Art von funktionaler Programmierung\
[1..n] ist ein Generator. Ist ein Ausdruck \
\
In Haskell gibt es if else construct\
\
Lambada Ausdr\'fccke erlauben eine Funktion kurz und b\'fcndig hin zu schreiben\
In Haskell werden die mit \\x geschrieben\
\

\fs42 Prelude> (\\x -> 2*x) 8\

\fs28 Lama Ausdr\'fccke und wie sie geschrieben werden\
\
Take liefert das was man angibt take 3 [1,2,3,4] Also die ersten drei\
Head liefert das erste Element\
Tail liefert alles au\'dfer das erste Element\
\
\
Lambda Ausdr\'fccke\
f x = cos x / x\
Man kann das auch anders schreiben\
\
f2 = \\x -> cos x / 2\
\
\
Variablen. Man kam ohne Variablen nicht aus. Wie z.b Pi nicht immer 3.14\
\
\
\
Haskell hat keine Variablen aber hat Konstanten.\
\
\
}